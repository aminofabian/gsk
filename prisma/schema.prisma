// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
  VERIFIED_USER
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Designation {
  MD
  PhD
  OTHER
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String?
  lastName              String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  membershipApplication MembershipApplication[]
  eventsAttending        Event[]                @relation("EventAttendees")
  eventsOrganizing       Event[]                @relation("EventOrganizers")
  
  // Profile fields
  bio                  String?                @db.Text
  title                String?
  specialization       String?
  hospital             String?
  profileSlug          String?                @unique
  socialLinks          SocialLink[]
  achievements         Achievement[]
  education            Education[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model MembershipApplication {
  id            String           @id @default(cuid())
  userId        String
  status        MembershipStatus @default(PENDING)
  designation   Designation
  speciality    String
  licenseNumber String?
  hospital      String
  address       String
  city          String
  county        String
  postalCode    String?
  phone         String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("membership_applications")
  @@index([userId])
}

enum EventType {
  CONFERENCE
  WORKSHOP
  SEMINAR
  MEETING
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  type        EventType
  startDate   DateTime
  endDate     DateTime
  venue       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attendees   User[]    @relation("EventAttendees")
  organizers  User[]    @relation("EventOrganizers")

  @@map("events")
}

model SocialLink {
  id        String   @id @default(cuid())
  platform  String
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("social_links")
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  year        Int?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("achievements")
}

model Education {
  id          String   @id @default(cuid())
  institution String
  degree      String
  field       String
  startYear   Int
  endYear     Int?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("education")
}

